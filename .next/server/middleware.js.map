{"version":3,"file":"middleware.js","mappings":"oFAAA,uDCAA,mLCGA,MAAeA,CAAAA,EAAAA,OAAAA,QAAAA,CAAQA,CACrB,SAASC,CAAkB,EAEzB,GAAIC,EAAQC,OAAO,CAACC,QAAQ,CAACC,UAAU,CAAC,SAAU,CAChD,IAAMC,EAAWC,EAAAA,YAAYA,CAACC,IAAI,SASlC,CANAF,EAASG,OAAO,CAACC,GAAG,CAAC,8BAA+BC,QAAQC,GAAG,CAACC,YAAY,EAAI,yBAChFP,EAASG,OAAO,CAACC,GAAG,CAAC,+BAAgC,mCACrDJ,EAASG,OAAO,CAACC,GAAG,CAAC,+BAAgC,+BACrDJ,EAASG,OAAO,CAACC,GAAG,CAAC,mCAAoC,QAGlC,WAAW,CAA9BR,EAAQY,MAAM,EACT,IAAIC,SAAS,KAAM,CAAEC,OAAQ,IAAKP,QAASH,EAASG,OAAO,GAG7DH,CACT,CAGA,IAAMW,EAAQf,EAAQgB,QAAQ,CAACD,KAAK,CAC9Bb,EAAWF,EAAQC,OAAO,CAACC,QAAQ,QAEzC,IAEMA,EAASC,CAFJ,SAEc,CAAC,aAAe,CAAC,CAAC,UAAW,MAAM,CAACc,QAAQ,CAACF,EAAMG,IAAI,GAAG,EAIpEf,UAAU,CAAC,cAAgB,CAAC,CAAC,WAAY,gBAAgB,CAACc,QAAQ,CAACF,EAAMG,IAAI,GAAG,EAIhFf,UAAU,CAAC,sBAAuC,iBAAiB,CAAhCY,EAAMG,IAAI,EAItDhB,EAASC,UAAU,CAAC,SAA0B,OAAO,CAAtBY,EAAMG,IAAI,EAIzChB,EAASC,UAAU,CAAC,WAA4B,SAAS,CAAxBY,EAAMG,IAAI,EAftCb,EAAAA,YAAYA,CAACc,QAAQ,CAAC,IAAIC,IAAI,SAAUpB,EAAQqB,GAAG,GAoBvDhB,EAAAA,YAAYA,CAACC,IAAI,EAC1B,EACA,CACEgB,UAAW,CACTC,WAAY,CAAC,OAAER,CAAK,KAAES,CAAG,CAAE,GAEzB,EAAIA,EAAIvB,OAAO,CAACC,QAAQ,CAACC,UAAU,CAAC,UACP,MAAzBqB,EAAIvB,OAAO,CAACC,QAAQ,EACK,WAAzBsB,EAAIvB,OAAO,CAACC,QAAQ,EACK,aAAa,CAAtCsB,EAAIvB,OAAO,CAACC,QAAQ,EAKjB,CAAC,CAACa,CAEb,CACF,GAGWU,CAFX,CAEoB,CACpBC,QAAS,CACP,cACA,kBACA,mBACA,2BACA,cACA,gBACA,kBACD,EACD,OC1EF,OACA,GAAO,CAAI,EAEX,0BACA,gBACA,wBACA,qDAA6D,EAAK,gFAClE,aACA,cACA,eACA,CAAK,EAkCU,cACf,MAAW,OAAO,EAClB,KACA,OACA,QAjCA,cACA,IACA,oBACA,CAAU,SASV,WACA,iBACA,qBAWA,OAVA,MAAkB,QAAiC,IACnD,OACA,gBACA,+CACA,CAAa,EACb,0BACA,wBACA,uBACA,uBACA,CAAa,EACb,CACA,CACA,CAOA,CAAK,CACL","sources":["webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/./middleware.js","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:buffer\");","module.exports = require(\"node:async_hooks\");","import { NextResponse } from 'next/server';\nimport { withAuth } from 'next-auth/middleware';\n\nexport default withAuth(\n  function middleware(request) {\n    // Handle CORS for API routes\n    if (request.nextUrl.pathname.startsWith('/api/')) {\n      const response = NextResponse.next();\n\n      // Add CORS headers\n      response.headers.set('Access-Control-Allow-Origin', process.env.FRONTEND_URL || 'http://localhost:3000');\n      response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n      response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n      response.headers.set('Access-Control-Allow-Credentials', 'true');\n\n      // Handle preflight requests\n      if (request.method === 'OPTIONS') {\n        return new Response(null, { status: 200, headers: response.headers });\n      }\n\n      return response;\n    }\n\n    // Get user info from NextAuth token\n    const token = request.nextauth.token;\n    const pathname = request.nextUrl.pathname;\n\n    if (token) {\n      // Role-based route protection\n      if (pathname.startsWith('/faculty') && !['faculty', 'hod'].includes(token.role)) {\n        return NextResponse.redirect(new URL('/login', request.url));\n      }\n\n      if (pathname.startsWith('/security') && !['security', 'security_head'].includes(token.role)) {\n        return NextResponse.redirect(new URL('/login', request.url));\n      }\n\n      if (pathname.startsWith('/securityincharge') && token.role !== 'security_head') {\n        return NextResponse.redirect(new URL('/login', request.url));\n      }\n\n      if (pathname.startsWith('/hod') && token.role !== 'hod') {\n        return NextResponse.redirect(new URL('/login', request.url));\n      }\n\n      if (pathname.startsWith('/admin') && token.role !== 'admin') {\n        return NextResponse.redirect(new URL('/login', request.url));\n      }\n    }\n\n    return NextResponse.next();\n  },\n  {\n    callbacks: {\n      authorized: ({ token, req }) => {\n        // Allow access to API routes and public pages\n        if (req.nextUrl.pathname.startsWith('/api/') ||\n            req.nextUrl.pathname === '/' ||\n            req.nextUrl.pathname === '/login' ||\n            req.nextUrl.pathname === '/register') {\n          return true;\n        }\n\n        // Require authentication for protected routes\n        return !!token;\n      },\n    },\n  }\n);\n\nexport const config = {\n  matcher: [\n    '/api/:path*',\n    '/faculty/:path*',\n    '/security/:path*',\n    '/securityincharge/:path*',\n    '/hod/:path*',\n    '/admin/:path*',\n    '/profile/:path*'\n  ]\n};\n","import \"next/dist/server/web/globals\";\nimport { adapter } from \"next/dist/server/web/adapter\";\n// Import the userland code.\nimport * as _mod from \"private-next-root-dir/middleware.js\";\nimport { edgeInstrumentationOnRequestError } from \"next/dist/server/web/globals\";\nimport { isNextRouterError } from \"next/dist/client/components/is-next-router-error\";\nconst mod = {\n    ..._mod\n};\nconst handler = mod.middleware || mod.default;\nconst page = \"/middleware\";\nif (typeof handler !== 'function') {\n    throw Object.defineProperty(new Error(`The Middleware \"${page}\" must export a \\`middleware\\` or a \\`default\\` function`), \"__NEXT_ERROR_CODE\", {\n        value: \"E120\",\n        enumerable: false,\n        configurable: true\n    });\n}\n// Middleware will only sent out the FetchEvent to next server,\n// so load instrumentation module here and track the error inside middleware module.\nfunction errorHandledHandler(fn) {\n    return async (...args)=>{\n        try {\n            return await fn(...args);\n        } catch (err) {\n            // In development, error the navigation API usage in runtime,\n            // since it's not allowed to be used in middleware as it's outside of react component tree.\n            if (process.env.NODE_ENV !== 'production') {\n                if (isNextRouterError(err)) {\n                    err.message = `Next.js navigation API is not allowed to be used in Middleware.`;\n                    throw err;\n                }\n            }\n            const req = args[0];\n            const url = new URL(req.url);\n            const resource = url.pathname + url.search;\n            await edgeInstrumentationOnRequestError(err, {\n                path: resource,\n                method: req.method,\n                headers: Object.fromEntries(req.headers.entries())\n            }, {\n                routerKind: 'Pages Router',\n                routePath: '/middleware',\n                routeType: 'middleware',\n                revalidateReason: undefined\n            });\n            throw err;\n        }\n    };\n}\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        page,\n        handler: errorHandledHandler(handler)\n    });\n}\n\n//# sourceMappingURL=middleware.js.map"],"names":["withAuth","middleware","request","nextUrl","pathname","startsWith","response","NextResponse","next","headers","set","process","env","FRONTEND_URL","method","Response","status","token","nextauth","includes","role","redirect","URL","url","callbacks","authorized","req","config","matcher"],"sourceRoot":"","ignoreList":[]}