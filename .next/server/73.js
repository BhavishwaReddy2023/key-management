exports.id=73,exports.ids=[73,834],exports.modules={28293:(a,b,c)=>{"use strict";c.r(b),c.d(b,{GET:()=>k,POST:()=>k,authOptions:()=>j});var d=c(19854),e=c.n(d),f=c(36344),g=c(63716);let h={"admin@vnrvjiet.in":"admin","principal@vnrvjiet.in":"admin","hod.cse@vnrvjiet.in":"hod","hod.ece@vnrvjiet.in":"hod","hod.eee@vnrvjiet.in":"hod","hod.mech@vnrvjiet.in":"hod","hod.civil@vnrvjiet.in":"hod","security@vnrvjiet.in":"security","security.head@vnrvjiet.in":"security_head"};function i(a,b=null){console.log(`🔍 getUserRole called for ${a}`);let c=(0,g.uG)(a);if(c)return console.log(`✅ Using stored role for ${a}: ${c}`),c;if(console.log(`⚠️ No stored role found for ${a}, checking fallbacks...`),b&&b.cookies){let c=b.cookies.get("pendingUserRole")?.value;if(c)return console.log(`🎯 Using pending role for ${a}: ${c}`),(0,g.yS)(a,c,"registration"),c}return h[a]?(console.log(`📋 Using mapped role for ${a}: ${h[a]}`),h[a]):a.includes("hod.")&&a.endsWith("@vnrvjiet.in")?(console.log(`🏢 Using HOD role for ${a}`),"hod"):a.includes("security")&&a.endsWith("@vnrvjiet.in")?(console.log(`🔒 Using security role for ${a}`),"security"):a.endsWith("@vnrvjiet.in")?(console.log(`👨‍🏫 Using default faculty role for ${a}`),"faculty"):(console.log(`❌ Access denied for ${a} - invalid domain`),null)}let j={providers:[(0,f.A)({clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET})],callbacks:{signIn:async({user:a})=>!!i(a.email)||(console.log(`Sign-in denied for email: ${a.email}`),!1),async jwt({token:a,user:b,trigger:d}){let e=b?.email||a.email;if(b&&(a.email=b.email,a.department=function(a){let b=a.split("@")[0];return b.includes("cse")?"Computer Science and Engineering":b.includes("ece")?"Electronics and Communication Engineering":b.includes("eee")?"Electrical and Electronics Engineering":b.includes("mech")?"Mechanical Engineering":b.includes("civil")?"Civil Engineering":b.includes("it")?"Information Technology":"General"}(b.email),a.employeeId=b.email.split("@")[0]),e){let c=i(e);if(c){let f=a.role!==c;a.role=c,b?console.log(`🔑 JWT created for ${e} with role: ${a.role}`):(f||"update"===d)&&console.log(`🔄 JWT role updated for ${e}: ${a.role} (trigger: ${d||"refresh"})`)}}if(e)try{let{connectDB:b}=await c.e(834).then(c.bind(c,93834)),d=(await c.e(652).then(c.bind(c,37652))).default;await b();let f=await d.findOne({email:e});f&&(a.dbUserId=f._id.toString(),console.log(`🆔 Set database user ID in token: ${a.dbUserId}`))}catch(a){console.error("Error getting user ID:",a)}return a},session:async({session:a,token:b})=>(b&&(a.user.id=b.dbUserId,a.user.role=b.role,a.user.department=b.department,a.user.employeeId=b.employeeId),a)},pages:{signIn:"/login",error:"/login"},session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET},k=e()(j)},63716:(a,b,c)=>{"use strict";c.d(b,{t_:()=>l,uG:()=>j,yS:()=>i});var d=c(29021),e=c.n(d),f=c(33873);let g=c.n(f)().join(process.cwd(),".user-roles.json"),h=new Map;function i(a,b,c="system"){h.set(a,{role:b,updatedAt:new Date().toISOString(),updatedBy:c});try{let a=Object.fromEntries(h);e().writeFileSync(g,JSON.stringify(a,null,2))}catch(a){console.error("Error saving roles to file:",a)}console.log(`✅ Role set for ${a}: ${b} (saved to file)`)}function j(a){let b=h.get(a),c=b?b.role:null;return c?console.log(`🔍 getUserRole: Found stored role for ${a}: ${c}`):console.log(`❌ getUserRole: No stored role found for ${a}. Available roles:`,Array.from(h.keys())),c}!function(){try{if(e().existsSync(g)){let a=e().readFileSync(g,"utf8"),b=JSON.parse(a);Object.entries(b).forEach(([a,b])=>{h.set(a,b)}),console.log(`📁 Loaded ${h.size} user roles from file`)}}catch(a){console.error("Error loading roles from file:",a)}}();let k=["faculty","hod","security","security_head","admin"];function l(a){return k.includes(a)}},75210:(a,b,c)=>{"use strict";c.d(b,{A:()=>g});var d=c(56037),e=c.n(d);let f=new(e()).Schema({type:{type:String,enum:["requested","approved","rejected","collected","returned","shared","share_revoked","overdue_reminder"],required:!0},keyId:{type:e().Schema.Types.ObjectId,ref:"Key",required:!0},facultyId:{type:e().Schema.Types.ObjectId,ref:"User",required:!0},securityPersonnelId:{type:e().Schema.Types.ObjectId,ref:"User"},assignmentId:{type:e().Schema.Types.ObjectId,ref:"KeyAssignment"},timestamp:{type:Date,default:Date.now},details:{type:String,trim:!0},status:{type:String,enum:["pending","completed","failed","cancelled"],default:"completed"},qrCodeData:{type:String},qrCodeExpiry:{type:Date},sharedWith:{type:e().Schema.Types.ObjectId,ref:"User"},sharedDuration:{type:String},sharingMessage:{type:String},location:{latitude:Number,longitude:Number,address:String},deviceInfo:{userAgent:String,ipAddress:String,deviceType:String},metadata:{type:e().Schema.Types.Mixed,default:{}},approvedBy:{type:e().Schema.Types.ObjectId,ref:"User"},approvalNotes:{type:String},errorMessage:{type:String},retryCount:{type:Number,default:0}},{timestamps:!0});f.index({facultyId:1,timestamp:-1}),f.index({keyId:1,timestamp:-1}),f.index({type:1,timestamp:-1}),f.index({securityPersonnelId:1,timestamp:-1}),f.index({timestamp:-1}),f.virtual("formattedTimestamp").get(function(){return{date:this.timestamp.toLocaleDateString(),time:this.timestamp.toLocaleTimeString(),relative:function(a){let b=Math.floor((new Date-a)/6e4);return b<1?"Just now":b<60?`${b}m ago`:b<1440?`${Math.floor(b/60)}h ago`:`${Math.floor(b/1440)}d ago`}(this.timestamp)}}),f.methods.markAsCompleted=function(a=""){return this.status="completed",a&&(this.details=a),this.save()},f.methods.markAsFailed=function(a){return this.status="failed",this.errorMessage=a,this.retryCount+=1,this.save()},f.methods.addMetadata=function(a,b){return this.metadata||(this.metadata={}),this.metadata[a]=b,this.save()},f.statics.getRecentActivity=function(a=50){return this.find().populate("keyId","name labName labNumber").populate("facultyId","name email").populate("securityPersonnelId","name").sort({timestamp:-1}).limit(a)},f.statics.getFacultyHistory=function(a,b=100){return this.find({facultyId:a}).populate("keyId","name labName labNumber").populate("securityPersonnelId","name").sort({timestamp:-1}).limit(b)},f.statics.getKeyHistory=function(a,b=100){return this.find({keyId:a}).populate("facultyId","name email").populate("securityPersonnelId","name").sort({timestamp:-1}).limit(b)},f.statics.getDepartmentActivity=function(a,b,c){return this.aggregate([{$lookup:{from:"keys",localField:"keyId",foreignField:"_id",as:"key"}},{$match:{"key.department":a,timestamp:{$gte:b,$lte:c}}},{$group:{_id:"$type",count:{$sum:1},latestActivity:{$max:"$timestamp"}}}])},f.statics.getUsageStats=function(a,b){return this.aggregate([{$match:{timestamp:{$gte:a,$lte:b}}},{$group:{_id:{date:{$dateToString:{format:"%Y-%m-%d",date:"$timestamp"}},type:"$type"},count:{$sum:1}}},{$group:{_id:"$_id.date",activities:{$push:{type:"$_id.type",count:"$count"}},totalCount:{$sum:"$count"}}},{$sort:{_id:1}}])},f.pre("save",function(a){this.details||(this.details=({requested:"Key access requested",approved:"Key request approved",rejected:"Key request rejected",collected:"Key collected from security desk",returned:"Key returned to security desk",shared:"Key access shared with another faculty",share_revoked:"Key sharing access revoked",overdue_reminder:"Overdue reminder sent"})[this.type]||"Key transaction"),a()}),f.post("save",async function(a){["overdue_reminder","shared","collected"].includes(a.type)&&console.log(`Transaction logged: ${a.type} for key ${a.keyId}`)});let g=e().models.KeyTransaction||e().model("KeyTransaction",f)},78335:()=>{},86789:(a,b,c)=>{"use strict";c.d(b,{A:()=>g});var d=c(56037),e=c.n(d);let f=new(e()).Schema({keyId:{type:e().Schema.Types.ObjectId,ref:"Key",required:!0},facultyId:{type:e().Schema.Types.ObjectId,ref:"User",required:!0},assignedBy:{type:e().Schema.Types.ObjectId,ref:"User",required:!0},assignedDate:{type:Date,default:Date.now},dueDate:{type:Date,required:!0},returnedDate:{type:Date},accessType:{type:String,enum:["permanent","temporary","shared"],default:"temporary"},status:{type:String,enum:["pending","active","returned","overdue","cancelled"],default:"pending"},requestReason:{type:String,trim:!0},returnReason:{type:String,trim:!0},qrCodeGenerated:{type:Boolean,default:!1},qrCodeGeneratedAt:{type:Date},qrCodeUsedAt:{type:Date},collectedAt:{type:Date},collectedBy:{type:e().Schema.Types.ObjectId,ref:"User"},returnedBy:{type:e().Schema.Types.ObjectId,ref:"User"},lastUsed:{type:Date},usageCount:{type:Number,default:0},actualDuration:{type:Number},remindersSent:{type:Number,default:0},lastReminderSent:{type:Date},approvalRequired:{type:Boolean,default:!1},approvedBy:{type:e().Schema.Types.ObjectId,ref:"User"},approvedAt:{type:Date},rejectedBy:{type:e().Schema.Types.ObjectId,ref:"User"},rejectedAt:{type:Date},rejectionReason:{type:String}},{timestamps:!0});f.index({facultyId:1,status:1}),f.index({keyId:1,status:1}),f.index({dueDate:1,status:1}),f.index({status:1,assignedDate:-1}),f.virtual("isOverdue").get(function(){return"active"===this.status&&new Date>this.dueDate}),f.virtual("daysOverdue").get(function(){return this.isOverdue?Math.ceil((new Date-this.dueDate)/864e5):0}),f.virtual("plannedDuration").get(function(){return Math.ceil((this.dueDate-this.assignedDate)/36e5)}),f.methods.markAsCollected=function(a){return this.status="active",this.collectedAt=new Date,this.collectedBy=a,this.qrCodeUsedAt=new Date,this.save()},f.methods.markAsReturned=function(a,b=""){if(this.status="returned",this.returnedDate=new Date,this.returnedBy=a,this.returnReason=b,this.collectedAt){let a=this.returnedDate-this.collectedAt;this.actualDuration=Math.ceil(a/36e5)}return this.save()},f.methods.generateQRCode=function(){return this.qrCodeGenerated=!0,this.qrCodeGeneratedAt=new Date,this.save()},f.methods.sendReminder=async function(){this.remindersSent+=1,this.lastReminderSent=new Date,await this.save()},f.statics.findOverdue=function(){return this.find({status:"active",dueDate:{$lt:new Date}}).populate("keyId facultyId")},f.statics.findByFaculty=function(a,b=null){let c={facultyId:a};return b&&(c.status=b),this.find(c).populate("keyId")},f.statics.getDepartmentStats=function(a){return this.aggregate([{$lookup:{from:"keys",localField:"keyId",foreignField:"_id",as:"key"}},{$match:{"key.department":a}},{$group:{_id:"$status",count:{$sum:1},avgDuration:{$avg:"$actualDuration"}}}])},f.pre("save",function(a){"active"===this.status&&new Date>this.dueDate&&(this.status="overdue"),a()}),f.post("save",async function(a){let b=e().model("Key"),c=await b.findById(a.keyId);c&&("active"===a.status||"overdue"===a.status?c.currentStatus="assigned":("returned"===a.status||"cancelled"===a.status)&&(c.currentStatus="available"),await c.save())});let g=e().models.KeyAssignment||e().model("KeyAssignment",f)},93834:(a,b,c)=>{"use strict";c.d(b,{connectDB:()=>h});var d=c(56037),e=c.n(d);let f=process.env.MONGODB_URI||"mongodb://localhost:27017/vnr-key-management";if(!f)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let g=global.mongoose;async function h(){if(g.conn)return g.conn;g.promise||(g.promise=e().connect(f,{bufferCommands:!1,maxPoolSize:10,serverSelectionTimeoutMS:5e3,socketTimeoutMS:45e3,family:4}).then(a=>(console.log("✅ Connected to MongoDB"),a)).catch(a=>{throw console.error("❌ MongoDB connection error:",a),a}));try{g.conn=await g.promise}catch(a){throw g.promise=null,a}return g.conn}async function i(){g.conn&&(await g.conn.disconnect(),g.conn=null,g.promise=null,console.log("\uD83D\uDD0C Disconnected from MongoDB"))}g||(g=global.mongoose={conn:null,promise:null}),e().connection.on("connected",()=>{console.log("\uD83D\uDD17 Mongoose connected to MongoDB")}),e().connection.on("error",a=>{console.error("❌ Mongoose connection error:",a)}),e().connection.on("disconnected",()=>{console.log("\uD83D\uDD0C Mongoose disconnected from MongoDB")}),process.on("SIGINT",async()=>{await i(),process.exit(0)})},96487:()=>{}};